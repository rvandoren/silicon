// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

// chaliceSuite/regressions/internal-bug-10.chalice
field Nodenext$: Ref

field Nodevalue$: Int

function Nodesize$(this$_3: Ref): Int
  requires this$_3 != null
  requires acc(Nodevalid$(this$_3), wildcard)
  ensures result > 0
{
  (unfolding acc(Nodevalid$(this$_3), wildcard) in (this$_3.Nodenext$ != null ? 1 + Nodesize$(this$_3.Nodenext$) : 1))
}

function Nodecontains$(this$_4: Ref, i: Int): Bool
  requires this$_4 != null
  requires acc(Nodevalid$(this$_4), wildcard)
{
  (unfolding acc(Nodevalid$(this$_4), wildcard) in (i == this$_4.Nodevalue$) || (this$_4.Nodenext$ != null) && Nodecontains$(this$_4.Nodenext$, i))
}

predicate Nodevalid$(this$_5: Ref) {
  acc(this$_5.Nodenext$, write) && acc(this$_5.Nodevalue$, write) && ((this$_5.Nodenext$ != null) ==> acc(Nodevalid$(this$_5.Nodenext$), write))
}

method Nodeinit$(this: Ref, k$: Perm, v: Int)
  requires this != null
  requires k$ > none
  requires write > k$
  requires acc(this.Nodenext$, write) && acc(this.Nodevalue$, write)
  ensures acc(Nodevalid$(this), write) && (Nodesize$(this) == 1) && (forall y: Int :: true ==> (Nodecontains$(this, y) == (y == v)))
{
  this.Nodenext$ := null
  this.Nodevalue$ := v
  fold acc(Nodevalid$(this), write)
}
