// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

function id(i: Int): Int { i }

method test01(i: Int)
  requires forall y: Int :: {id(y)} id(y) == i // Equivalent to false
  ensures  id(0) == 0 && id(1) == 1 // Needed for triggering (in Silicon and Carbon), to learn the contradiction
  ensures  false
{}

method test02(i: Int)
  requires forall y: Int :: {id(y)} id(y) == i
  // ensures id(0) == 0 && id(1) == 1 // Required by Silicon, but not by Carbon
  ensures  forall y: Int :: {id(y)} id(y) == y && id(y) == i // Holds (in Silicon and Carbon)
  //:: UnexpectedOutput(postcondition.violated:assertion.false, /silicon/issue/567/)
  ensures  forall y: Int :: {id(y)} id(y) == y && y == i     // Fails in Silicon
{}

// Analogous to test02
method test03(i: Int) {
  inhale forall y: Int :: {id(y)} id(y) == i
  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/567/)
  assert forall y: Int :: {id(y)} id(y) == y && y == i     // Fails in Silicon
}
