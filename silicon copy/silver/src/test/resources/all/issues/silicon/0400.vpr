// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/carbon/issue/293/)

/*
 * First few tests don't include corner-cases
 */

method test_take_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)
  assert a[..0] == Seq()
  assert a[..1] == Seq(1)
  assert a[..2] == Seq(1,4)
  assert a[..5] == a
}

method test_take_length_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)
  assert |a[..0]| == 0
  assert |a[..1]| == 1
  assert |a[..2]| == 2
  assert |a[..5]| == |a|
}

method test_drop_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)
  assert a[0..] == a
  assert a[2..] == Seq(5, 7, 8)
  assert a[4..] == Seq(8)
  assert a[5..] == Seq()
}

method test_drop_length_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)
  assert |a[0..]| == |a|
  assert |a[2..]| == 3
  assert |a[4..]| == 1
  assert |a[5..]| == 0
}

method test_take_drop_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)
  assert a[0..2] == a[..2][0..]
  assert a[2..4] == a[..4][2..]
  assert a[0..5] == a[..5][0..]
  assert a[1..1] == a[..1][1..]
}

method test_take_drop_length_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)
  assert |a[0..2]| == 2
  assert |a[2..4]| == 2
  assert |a[0..5]| == 5
  assert |a[1..1]| == 0
}

/*
 * Corner cases for take
 */

method test_take_02() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert a[..-1] == Seq()

  var e1: Int; assume e1 < -1
  assert a[..e1] == Seq()

  assert a[..6] == a

  var e2: Int; assume 6 < e2
  assert a[..e2] == a

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test_take_length_02() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert |a[..-1]| == 0

  var e1: Int; assume e1 < -1
  assert |a[..e1]| == 0

  assert |a[..6]| == 5

  var e2: Int; assume 6 < e2
  assert |a[..e2]| == 5
}

method test_take_index_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert a[..10][3] == 7
}

/*
 * Corner cases for drop
 */

method test_drop_02() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert a[-1..] == a

  var e1: Int; assume e1 < -1
  assert a[e1..] == a

  assert a[6..] == Seq()

  var e2: Int; assume 6 < e2
  assert a[e2..] == Seq()
}

method test_drop_length_02() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert |a[-1..]| == 5

  var e1: Int; assume e1 < -1
  assert |a[e1..]| == 5

  assert |a[6..]| == 0

  var e2: Int; assume 6 < e2
  assert |a[e2..]| == 0

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test_drop_index_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert a[0..][3] == 7
  assert a[-1..][3] == 7
}

/*
 * Corner cases for take-drop
 */

method test_take_drop_02() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert a[2..2] == Seq()
  assert a[3..2] == Seq()

  var e1: Int;
  var e2: Int;
  assume 0 <= e2 && e2 <= e1 && e1 <= |a|

  assert a[e1..e2] == Seq()

  var e3: Int;
  var e4: Int;
  assume e4 <= e3

  assert a[e3..e4] == Seq()
}

method test_take_drop_length_02() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert |a[2..2]| == 0
  assert |a[3..2]| == 0

  var e1: Int;
  var e2: Int;
  assume 0 <= e2 && e2 <= e1 && e1 <= 5

  assert |a[e1..e2]| == 0

  var e3: Int;
  var e4: Int;
  assume e4 <= e3

  assert |a[e3..e4]| == 0
}

method reported_example() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)
  assert a[-1..1] == a[0..1]
}
