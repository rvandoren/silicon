// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field item: Int

function seqToSeqHelper_wild(xs: Seq[Ref], i: Int): Seq[Int]
  requires 0 <= i && i <= |xs|
  requires forall k:Int, j:Int :: k >= 0 && k < |xs| && j >= 0 && j < |xs| && k != j ==> xs[k] != xs[j]
  requires (forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].item, wildcard))
  requires [i < |xs|, true]

  ensures |result| == |xs| - i
  ensures (forall j: Int :: i <= j && j < |xs| ==> result[j - i] == xs[j].item)
{
  Seq(xs[i].item) ++ seqToSeqHelper_wild(xs, i + 1)
}

function seqToSeqHelper_frac(xs: Seq[Ref], i: Int): Seq[Int]
  requires 0 <= i && i <= |xs|
  requires forall k:Int, j:Int :: k >= 0 && k < |xs| && j >= 0 && j < |xs| && k != j ==> xs[k] != xs[j]
  requires (forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].item, 1/77))
  requires [i < |xs|, true]

  ensures |result| == |xs| - i
  ensures (forall j: Int :: i <= j && j < |xs| ==> result[j - i] == xs[j].item)
{
  Seq(xs[i].item) ++ seqToSeqHelper_frac(xs, i + 1)
}

method method_seqToSeqHelper(xs: Seq[Ref], i: Int) returns (res: Seq[Int])
  requires 0 <= i && i <= |xs|
  requires forall k:Int, j:Int :: k >= 0 && k < |xs| && j >= 0 && j < |xs| && k != j ==> xs[k] != xs[j]
  requires (forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].item, wildcard))
  ensures 0 <= i && i <= |xs|
  ensures (forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].item, wildcard))

  ensures |res| == |xs| - i
  ensures (forall j: Int :: i <= j && j < |xs| ==> res[j - i] == xs[j].item)
{
  if (i < |xs|) {
    var tail: Seq[Int]
    tail := method_seqToSeqHelper(xs, i + 1)
    res := Seq(xs[i].item) ++ tail
  } else {
    res := Seq()
  }
}

method method_seqToSeqHelper2(xs: Seq[Ref], i: Int) returns (res: Seq[Int])
  requires 0 <= i && i <= |xs|
  requires forall k:Int, j:Int :: k >= 0 && k < |xs| && j >= 0 && j < |xs| && k != j ==> xs[k] != xs[j]
  requires (forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].item, wildcard))
  ensures 0 <= i && i <= |xs|
  ensures (forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].item, wildcard))

  ensures |res| == |xs| - i
  ensures (forall j: Int :: i <= j && j < |xs| ==> res[j - i] == xs[j].item)
{
  if (i < |xs|) {
    var tail: Seq[Int]
    tail := seqToSeqHelper_wild(xs, i + 1) // with this instead of the line below, both methods fail
    res := Seq(xs[i].item) ++ tail
  } else {
    res := Seq()
  }
}




domain VCTArray[CT] {
  function loc(a: VCTArray[CT], i: Int): CT

  function alen(a: VCTArray[CT]): Int

  axiom len_nonneg {
    (forall a: VCTArray[CT] :: { alen(a) } alen(a) >= 0)
  }

  axiom loc_inject {
	forall a: VCTArray[CT], i: Int, j: Int :: { loc(a, i), loc(a, j) } i >= 0 && j >= 0 && i < alen(a) && j < alen(a) && i != j ==> loc(a, i) != loc(a, j)
  }
}

function sumContrib(A: VCTArray[Ref], i: Int, P: Rational): Int
  requires 0/1 < P && P < 1/1;
  requires 0 <= i && i <= alen(A)
  requires (forall j: Int :: 0 <= j && j < alen(A) ==> acc(loc(A, j).item, wildcard))
{
  (i == alen(A) ? 0 : loc(A, i).item + sumContrib(A, i + 1, P))
}

method lemmaSumInit(xs: VCTArray[Ref], i: Int, P: Rational)
  requires 0/1 < P && P < 1/1;
  requires (forall i_fresh_rw_0: Int :: 0 <= i_fresh_rw_0 && i_fresh_rw_0 < alen(xs) ==> acc(loc(xs, i_fresh_rw_0).item, wildcard))
  requires (forall j: Int :: 0 <= j && j < alen(xs) ==> loc(xs, j).item == 0)
  requires 0 <= i && i <= alen(xs)
{
    assert sumContrib(xs, i, P) == (i == alen(xs) ? 0 : loc(xs, i).item + sumContrib(xs, i + 1, P))
}
