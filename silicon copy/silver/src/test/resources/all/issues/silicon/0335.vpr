// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field val: Int

domain Array {
	function loc(a: Array, i: Int): Ref
	function len(a: Array): Int

	axiom loc_inject {
		forall a: Array, i: Int, j: Int :: { loc(a, i), loc(a, j) } i >= 0 && j >= 0 && i < len(a) && j < len(a) && i != j ==> loc(a, i) != loc(a, j)
	}
}

predicate array(a: Array) {
    forall i: Int :: {loc(a, i).val} (0 <= i && i < len(a)) ==> acc(loc(a, i).val)
}

field left: Ref
field right: Ref

predicate tree(root: Ref) {
    acc(root.val) &&
    acc(root.left) && (root.left != null ==> tree(root.left)) &&
    acc(root.right) && (root.right != null ==> tree(root.right))
}

method _treeToArray(root: Ref, a: Array, i: Int)
    requires tree(root)
    requires array(a)
    ensures tree(root)
    ensures unfolding tree(root) in root.val == old(unfolding tree(root) in root.val)
{
    unfold tree(root)

    unfold array(a)
    fold array(a)

    if (root.right != null) {
        _treeToArray(root.right, a, 0)
    }

    fold tree(root)
}
