// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field nx : Ref

predicate Peano(r:Ref) { r != null ==> acc(r.nx) && Peano(r.nx) }

function integer(r:Ref) : Int
  requires Peano(r)
{ unfolding Peano(r) in r == null ? 0 : 1 + integer(r.nx) }

function integer2(r:Ref,k:Int) : Int
  requires Peano(r)
{ integer(r) + k }

method A(r:Ref)
  requires Peano(r)
  requires r != null
{
  inhale unfolding Peano(r) in r.nx == r
  assert forall k : Int ::
    { integer2(r.nx,k) }
    (unfolding Peano(r) in integer2(r.nx,k) >= 0) ==> integer2(r,k) > 0
}

method B(r:Ref)
  requires Peano(r)
  requires r != null
{
  assert forall k : Int ::
    { integer2(r,k) }
    (unfolding Peano(r) in integer2(r.nx,k) >= 0) ==> integer2(r,k) > 0
}
