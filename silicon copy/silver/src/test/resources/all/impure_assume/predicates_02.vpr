// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

predicate P(x: Ref, i: Int)

define test01_body {
  var x: Ref; var i: Int
  var y: Ref; var j: Int

  inhale acc(P(x, i), 1/3)

  if (b) {
    inhale acc(P(x, i), 1/4)
  }

  assume acc(P(x, i), 1/3) && (b ==> acc(P(y, j), 3/16)) && acc(P(y, j), 0/16)

  assert perm(P(x, i)) == 1/3 + (b ? 1/4 : none)
  assert b ==> y == x && j == i

  if (x != y || i != j) {
    assert !b
    assert perm(P(y, j)) == none
  }
}

method test01(b: Bool) {
  test01_body
}

// Remaining tests each correspond to one path through the code, with a subsequent assert false.
// Since Silicon stops at the first verification error (per method), an explicit enumeration ensures
// that Silicon refutes false at the end of each possible path.

method test01_p1(b: Bool) {
  test01_body
  assume b && (x != y || i != j)
  assert false // should hold
}

method test01_p2(b: Bool) {
  test01_body
  assume b && !(x != y || i != j)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test01_p3(b: Bool) {
  test01_body
  assume !b && (x != y || i != j)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test01_p4(b: Bool) {
  test01_body
  assume !b && !(x != y || i != j)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}
