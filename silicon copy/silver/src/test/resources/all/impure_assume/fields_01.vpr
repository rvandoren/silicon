// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int

method test00_single() {
  var x: Ref

  inhale acc(x.f, 1/2)
  assume acc(x.f, 1/2)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test00_same_tight_first() {
  var x: Ref

  inhale acc(x.f)
  assume acc(x.f, 1/3) && acc(x.f, 2/3)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test00_same_tight_second() {
  var x: Ref

  inhale acc(x.f)
  assume acc(x.f, 2/3) && acc(x.f, 1/3)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test00_same_tight_three_left_leaning() {
  var x: Ref

  inhale acc(x.f)
  assume (acc(x.f, 3/6) && acc(x.f, 2/6)) && acc(x.f, 1/6)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test00_same_tight_three_right_leaning() {
  var x: Ref

  inhale acc(x.f)
  assume acc(x.f, 3/6) && (acc(x.f, 2/6) && acc(x.f, 1/6))
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}



method test01_diff() {
  var x: Ref
  var y: Ref

  inhale acc(x.f)
  assume acc(x.f, 1/2) && acc(y.f, 1/2)
  assert x == y
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test01_same1() {
  var x: Ref

  inhale acc(x.f, 2/3)
  assume acc(x.f, 2/5) && acc(x.f, 3/5)

  assert false // due to preceding assume
}

method test01_same2() {
  var x: Ref

  inhale acc(x.f)
  assume acc(x.f, 1/2) && acc(x.f, 1/2)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test02() {
  var x: Ref
  var y: Ref

  var px: Perm; assume none < px
  var py: Perm; assume none < py

  inhale acc(x.f, 1/10)
  assume acc(x.f, px) && acc(y.f, py)

  assert px <= 1/10
  assert y == x
}

method test03() {
  var x: Ref
  var y: Ref
  var z: Ref

  var px: Perm; assume none < px
  var py: Perm; assume none < py
  var pz: Perm; assume none < pz

  inhale acc(x.f, 1/5) && acc(y.f, 1/10)
  assume acc(x.f, px) && acc(y.f, py) && acc(z.f, pz)

  assert z == x || z == y

  if (x != y) {
    assert px <= 1/5 && py <= 1/10
  } else {
    assert px <= 3/10 && py <= 3/10
  }
}
