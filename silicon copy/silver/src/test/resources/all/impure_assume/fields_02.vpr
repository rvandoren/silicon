// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int

define test01_body {
  var x: Ref
  var y: Ref

  inhale acc(x.f, 1/3)

  if (b) {
    inhale acc(x.f, 1/4)
  }

  assume acc(x.f, 1/3) && (b ==> acc(y.f, 3/16)) && acc(y.f, 0/16)

  assert perm(x.f) == 1/3 + (b ? 1/4 : none)
  assert b ==> y == x

  if (x != y) {
    assert !b
    assert perm(y.f) == none
  }
}

method test01(b: Bool) {
  test01_body
}

// Remaining tests each correspond to one path through the code, with a subsequent assert false.
// Since Silicon stops at the first verification error (per method), an explicit enumeration ensures
// that Silicon refutes false at the end of each possible path.

method test01_p1(b: Bool) {
  test01_body
  assume b && x != y
  assert false // should hold
}

method test01_p2(b: Bool) {
  test01_body
  assume b && x == y
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test01_p3(b: Bool) {
  test01_body
  assume !b && x != y
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test01_p4(b: Bool) {
  test01_body
  assume !b && x == y
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}
