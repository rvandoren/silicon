// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

/* Reduced version of an example provided by Stefan Blom of U Twente.
 * Crashed Silicon at some point because of an internal assertion that prevented
 * dereferencing a quantified field at a receiver expression in which more than
 * one quantified variable occurred.
 */

field val: Int

function idx(M: Int, N: Int,i:Int,j:Int):Int
{ 0 }

method test2c(N: Int, M: Int, src: Seq[Ref],dst: Seq[Ref])
  requires M > 0 && N > 0 && |src| == N * M && |dst| == N * M
  requires forall k:Int, j:Int :: k >= 0 && k < |src| && j >= 0 && j < |src| && k != j ==> src[k] != src[j]
  requires (forall i: Int :: (i in [0..M * N)) ==> acc(src[i].val, 1 / 2))
  requires (forall i: Int :: (i in [0..M)) ==> (forall j: Int :: (j in [0..N)) ==> src[idx(M,N,i,j)].val == i ) ) /* Used to crash */
{}

function idx_abs(M: Int, N: Int,i:Int,j:Int):Int
  ensures 0 <= result && result < N*M

method test2d(N: Int, M: Int, src: Seq[Ref],dst: Seq[Ref])
  requires M > 0 && N > 0 && |src| == N * M && |dst| == N * M
  requires forall k:Int, j:Int :: k >= 0 && k < |src| && j >= 0 && j < |src| && k != j ==> src[k] != src[j]
  requires (forall i: Int :: (i in [0..M * N)) ==> acc(src[i].val, 1 / 2))
  requires (forall i: Int :: (i in [0..M)) ==> (forall j: Int :: (j in [0..N)) ==> src[idx_abs(M,N,i,j)].val == i ) ) /* Used to crash */
{}
